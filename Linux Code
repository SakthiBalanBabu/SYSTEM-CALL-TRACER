#include <stdio.h>
#include <stdlib.h>
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/user.h>
#include <unistd.h>
#include <sys/syscall.h>
#include <string.h>
#include <errno.h>

// Function to print system call information
void print_syscall_info(pid_t child, struct user_regs_struct regs) {
    printf("PID %d: %s (syscall number %lld)\n", child, syscalls[regs.orig_rax], regs.orig_rax);
    printf("Arguments: rdi=%llx rsi=%llx rdx=%llx r10=%llx r8=%llx r9=%llx\n",
           regs.rdi, regs.rsi, regs.rdx, regs.r10, regs.r8, regs.r9);
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <program> [args]\n", argv[0]);
        return 1;
    }

    const char *syscalls[] = {
        [0] = "read",
        [1] = "write",
        [2] = "open",
        [3] = "close",
        [59] = "execve",
        // Add more syscall names as needed
    };

    pid_t child;
    child = fork();

    if (child == 0) {
        // Child process
        if (ptrace(PTRACE_TRACEME, 0, NULL, NULL) == -1) {
            perror("ptrace");
            exit(1);
        }
        execvp(argv[1], &argv[1]);
        perror("execvp");
        exit(1);
    } else {
        // Parent process
        int status;
        waitpid(child, &status, 0);
        
        while (WIFSTOPPED(status)) {
            struct user_regs_struct regs;
            if (ptrace(PTRACE_GETREGS, child, NULL, &regs) == -1) {
                perror("ptrace");
                exit(1);
            }
            print_syscall_info(child, regs);

            if (ptrace(PTRACE_SYSCALL, child, NULL, NULL) == -1) {
                perror("ptrace");
                exit(1);
            }
            waitpid(child, &status, 0);
        }
    }

    return 0;
}
